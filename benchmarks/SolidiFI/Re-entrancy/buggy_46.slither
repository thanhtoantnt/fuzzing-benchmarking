==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ProofOfExistence
Function name: withdrawBalance_re_ent40()
PC address: 3460
Estimated Gas Usage: 7113 - 62057
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: Re-entrancy/buggy_46.sol:82

msg.sender.call.value(userBalance_re_ent40[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000071672, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x91012a03, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ProofOfExistence
Function name: withdrawBalance_re_ent40()
PC address: 3595
Estimated Gas Usage: 7113 - 62057
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_46.sol:86

userBalance_re_ent40[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000050802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x84000004, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ProofOfExistence
Function name: withdrawBalance_re_ent33()
PC address: 6346
Estimated Gas Usage: 7156 - 62100
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: Re-entrancy/buggy_46.sol:105

msg.sender.call.value(userBalance_re_ent33[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0439, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ProofOfExistence
Function name: withdrawBalance_re_ent33()
PC address: 6481
Estimated Gas Usage: 7156 - 62100
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_46.sol:109

userBalance_re_ent33[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x189b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ProofOfExistence
Function name: SetFileExistenceProof(address,string,string,address,uint8)
PC address: 7089
Estimated Gas Usage: 1672 - 9675
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: Re-entrancy/buggy_46.sol:36

generateQRCodeForFile(dappBoxOrigin,_fileHash,_filePathHash,_contractAddress ,_identifier)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: SetFileExistenceProof(address,string,string,address,uint8), txdata: 0x846d949100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007, decoded_data: ('0x0000000000000000000000000000000000000000', '', '', '0x0000000000000000000000000000000000000000', 7), value: 0x0


