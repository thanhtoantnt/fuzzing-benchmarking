==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AZT
Function name: constructor
PC address: 1018
Estimated Gas Usage: 149653 - 622803
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: Re-entrancy/buggy_17.sol:357

now + 1 * 1 hours

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AZT
Function name: frozenAddresses(uint256)
PC address: 5834
Estimated Gas Usage: 1157 - 1252
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: Re-entrancy/buggy_17.sol:316

address[] public frozenAddresses

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: frozenAddresses(uint256), txdata: 0x5506ed440000000000000000000000010000000000000000000000000000000000000000, decoded_data: (1461501637330902918203684832716283019655932542976,), value: 0x0


