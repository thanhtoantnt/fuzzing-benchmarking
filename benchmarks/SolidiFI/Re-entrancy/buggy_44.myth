==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EventMetadata
Function name: withdrawBalance_re_ent40()
PC address: 237
Estimated Gas Usage: 7041 - 61985
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: Re-entrancy/buggy_44.sol:14

msg.sender.call.value(userBalance_re_ent40[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x3e3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EventMetadata
Function name: withdrawBalance_re_ent40()
PC address: 373
Estimated Gas Usage: 7041 - 61985
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_44.sol:18

userBalance_re_ent40[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x60f39, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Template
Function name: withdraw_balances_re_ent1()
PC address: 1280
Estimated Gas Usage: 7148 - 62092
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: Re-entrancy/buggy_44.sol:363

msg.sender.call.value(balances_re_ent1[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0xcd78c15200000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Template
Function name: withdraw_balances_re_ent1()
PC address: 1410
Estimated Gas Usage: 7148 - 62092
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_44.sol:365

balances_re_ent1[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x893024630004d327, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Operated
Function name: withdrawBalance_re_ent26()
PC address: 2399
Estimated Gas Usage: 7144 - 61805
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: Re-entrancy/buggy_44.sol:193

msg.sender.call.value(userBalance_re_ent26[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000100010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Operated
Function name: withdrawBalance_re_ent26()
PC address: 2536
Estimated Gas Usage: 7144 - 61805
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_44.sol:197

userBalance_re_ent26[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000140000040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Operated
Function name: buyTicket_re_ent9()
PC address: 3292
Estimated Gas Usage: 14462 - 89403
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_44.sol:157

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x600c0b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Operated
Function name: buyTicket_re_ent9()
PC address: 3345
Estimated Gas Usage: 14462 - 89403
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_44.sol:157

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x600c0b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Operated
Function name: buyTicket_re_ent9()
PC address: 3375
Estimated Gas Usage: 14462 - 89403
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_44.sol:158

jackpot_re_ent9    = address(this).balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x600c0b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0


