==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EventMetadata
Function name: withdrawBalance_re_ent33()
PC address: 237
Estimated Gas Usage: 7041 - 61985
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: Re-entrancy/buggy_43.sol:14

msg.sender.call.value(userBalance_re_ent33[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3ff9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EventMetadata
Function name: withdrawBalance_re_ent33()
PC address: 373
Estimated Gas Usage: 7041 - 61985
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_43.sol:18

userBalance_re_ent33[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x8bfa9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Template
Function name: withdraw_balances_re_ent8()
PC address: 1130
Estimated Gas Usage: 7126 - 62070
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: Re-entrancy/buggy_43.sol:413

msg.sender.call.value(balances_re_ent8[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1391caa001a0c93, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent8(), txdata: 0xa2bcc8c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Template
Function name: withdraw_balances_re_ent8()
PC address: 1261
Estimated Gas Usage: 7126 - 62070
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_43.sol:415

balances_re_ent8[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x4315808800099f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent8(), txdata: 0xa2bcc8c5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Operated
Function name: withdrawFunds_re_ent17(uint256)
PC address: 1834
Estimated Gas Usage: 8086 - 63030
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: Re-entrancy/buggy_43.sol:79

msg.sender.call.value(_weiToWithdraw)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x8480080000000081, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent17(uint256), txdata: 0x8d18e1e80000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Operated
Function name: withdrawFunds_re_ent17(uint256)
PC address: 1972
Estimated Gas Usage: 8086 - 63030
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_43.sol:81

balances_re_ent17[msg.sender] -= _weiToWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x505c022019d002002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent17(uint256), txdata: 0x8d18e1e80000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Operated
Function name: withdrawFunds_re_ent17(uint256)
PC address: 1979
Estimated Gas Usage: 8086 - 63030
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_43.sol:81

balances_re_ent17[msg.sender] -= _weiToWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x505c022019d002002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent17(uint256), txdata: 0x8d18e1e80000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Operated
Function name: withdrawBalance_re_ent26()
PC address: 2095
Estimated Gas Usage: 7173 - 62117
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: Re-entrancy/buggy_43.sol:164

msg.sender.call.value(userBalance_re_ent26[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x30001a0003008881, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Operated
Function name: withdrawBalance_re_ent26()
PC address: 2232
Estimated Gas Usage: 7173 - 62117
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_43.sol:168

userBalance_re_ent26[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x30800800000c0089, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Operated
Function name: withdrawFunds_re_ent3(uint256)
PC address: 2802
Estimated Gas Usage: 8196 - 63140
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: Re-entrancy/buggy_43.sol:108

msg.sender.call.value(_weiToWithdraw)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x90200000938088f3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent3(uint256), txdata: 0xa4e80ee00000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Operated
Function name: withdrawFunds_re_ent3(uint256)
PC address: 2940
Estimated Gas Usage: 8196 - 63140
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_43.sol:110

balances_re_ent3[msg.sender] -= _weiToWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x301419860007220a1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x680000000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent3(uint256), txdata: 0xa4e80ee00000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Operated
Function name: withdrawFunds_re_ent3(uint256)
PC address: 2947
Estimated Gas Usage: 8196 - 63140
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_43.sol:110

balances_re_ent3[msg.sender] -= _weiToWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x301419860007220a1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x680000000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds_re_ent3(uint256), txdata: 0xa4e80ee00000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Operated
Function name: buyTicket_re_ent9()
PC address: 3402
Estimated Gas Usage: 14535 - 89759
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_43.sol:124

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x2c62000641c5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Operated
Function name: buyTicket_re_ent9()
PC address: 3455
Estimated Gas Usage: 14535 - 89759
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_43.sol:124

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x2c62000641c5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Operated
Function name: buyTicket_re_ent9()
PC address: 3485
Estimated Gas Usage: 14535 - 89759
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_43.sol:125

jackpot_re_ent9    = address(this).balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x2c62000641c5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Operated
Function name: withdraw_balances_re_ent1()
PC address: 3770
Estimated Gas Usage: 7368 - 62312
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: Re-entrancy/buggy_43.sol:52

msg.sender.call.value(balances_re_ent1[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000034128011001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Operated
Function name: withdraw_balances_re_ent1()
PC address: 3901
Estimated Gas Usage: 7368 - 62312
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: Re-entrancy/buggy_43.sol:54

balances_re_ent1[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x3290808083800000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x11000000400000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0


