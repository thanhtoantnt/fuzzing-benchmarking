==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: owned
Function name: bug_txorigin12(address)
PC address: 656
Estimated Gas Usage: 235 - 330
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:59

require(tx.origin == owner_txorigin12)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: bug_txorigin12(address), txdata: 0x57c7f0e80000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: owned
Function name: sendto_txorigin1(address,uint256,address)
PC address: 717
Estimated Gas Usage: 317 - 412
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:90

require (tx.origin == owner_txorigin1)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sendto_txorigin1(address,uint256,address), txdata: 0x64acbadd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: owned
Function name: transferOwnership(address)
PC address: 921
Estimated Gas Usage: 1137 - 1562
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:78

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: owned
Function name: transferTo_txorigin11(address,uint256,address)
PC address: 1106
Estimated Gas Usage: 383 - 478
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:70

require(tx.origin == owner_txorigin11)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferTo_txorigin11(address,uint256,address), txdata: 0xfca25f6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: bug_txorigin32(address)
PC address: 4621
Estimated Gas Usage: 235 - 330
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:194

require(tx.origin == owner_txorigin32)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3c200000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: bug_txorigin32(address), txdata: 0x06b3ad660000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: transferTo_txorigin31(address,uint256,address)
PC address: 4682
Estimated Gas Usage: 317 - 412
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:315

require(tx.origin == owner_txorigin31)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000400003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferTo_txorigin31(address,uint256,address), txdata: 0x093533b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: transferTo_txorigin39(address,uint256,address)
PC address: 4745
Estimated Gas Usage: 339 - 434
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:263

require(tx.origin == owner_txorigin39)

--------------------
Initial State:

Account: [CREATOR], balance: 0x404000800000403, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferTo_txorigin39(address,uint256,address), txdata: 0x0a20e74e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: activeBonus()
PC address: 4932
Estimated Gas Usage: 1925 - 2680
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:181

require(msg.sender == owner, "only owner can use this method")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: activeBonus(), txdata: 0x0c869ebe, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: transferTo_txorigin27(address,uint256,address)
PC address: 5191
Estimated Gas Usage: 383 - 478
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:306

require(tx.origin == owner_txorigin27)

--------------------
Initial State:

Account: [CREATOR], balance: 0xb, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferTo_txorigin27(address,uint256,address), txdata: 0x0ccb9a12000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: releaTeamAddBonus()
PC address: 5287
Estimated Gas Usage: 1093 - 1518
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:78

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: releaTeamAddBonus(), txdata: 0x13856431, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: releaTeamAddBonus()
PC address: 5378
Estimated Gas Usage: 1969 - 2724
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:319

require(msg.sender == owner, "only owner can use this method")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: releaTeamAddBonus(), txdata: 0x13856431, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: staticBonus()
PC address: 5670
Estimated Gas Usage: 1115 - 1540
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:78

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: staticBonus(), txdata: 0x1dbcd416, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: staticBonus()
PC address: 5761
Estimated Gas Usage: 1991 - 2746
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:172

require(msg.sender == owner, "only owner can use this method")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: staticBonus(), txdata: 0x1dbcd416, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: activeBonusCacl_2()
PC address: 6053
Estimated Gas Usage: 1137 - 1562
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:78

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: activeBonusCacl_2(), txdata: 0x251cbdcb, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: activeBonusCacl_2()
PC address: 6144
Estimated Gas Usage: 2013 - 2768
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:214

require(msg.sender == owner, "only owner can use this method")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: activeBonusCacl_2(), txdata: 0x251cbdcb, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: activeBonusCacl_6()
PC address: 6436
Estimated Gas Usage: 1159 - 1584
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:78

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: activeBonusCacl_6(), txdata: 0x257a50c7, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: activeBonusCacl_6()
PC address: 6527
Estimated Gas Usage: 2035 - 2790
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:250

require(msg.sender == owner, "only owner can use this method")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: activeBonusCacl_6(), txdata: 0x257a50c7, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: moveBrickClear()
PC address: 6819
Estimated Gas Usage: 1181 - 1606
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:78

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: moveBrickClear(), txdata: 0x2aeccacc, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: moveBrickClear()
PC address: 6910
Estimated Gas Usage: 2057 - 2812
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:140

require(msg.sender == owner, "only owner can use this method")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: moveBrickClear(), txdata: 0x2aeccacc, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: activeBonusCacl_1()
PC address: 7131
Estimated Gas Usage: 1203 - 1628
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:78

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: activeBonusCacl_1(), txdata: 0x2db9c867, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: activeBonusCacl_1()
PC address: 7222
Estimated Gas Usage: 2079 - 2834
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:206

require(msg.sender == owner, "only owner can use this method")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: activeBonusCacl_1(), txdata: 0x2db9c867, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: caclTeamPerformance()
PC address: 7514
Estimated Gas Usage: 1225 - 1650
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:78

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: caclTeamPerformance(), txdata: 0x2f06b5a7, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: caclTeamPerformance()
PC address: 7605
Estimated Gas Usage: 2101 - 2856
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:292

require(msg.sender == owner, "only owner can use this method")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: caclTeamPerformance(), txdata: 0x2f06b5a7, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: transferTo_txorigin7(address,uint256,address)
PC address: 7864
Estimated Gas Usage: 559 - 654
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:219

require(tx.origin == owner_txorigin7)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferTo_txorigin7(address,uint256,address), txdata: 0x3373f9d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: staticBonusCacl()
PC address: 7960
Estimated Gas Usage: 1269 - 1694
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:78

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0xc402a0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: staticBonusCacl(), txdata: 0x3380e2f1, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: staticBonusCacl()
PC address: 8051
Estimated Gas Usage: 2145 - 2900
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:197

require(msg.sender == owner, "only owner can use this method")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: staticBonusCacl(), txdata: 0x3380e2f1, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: joinFlexible()
PC address: 8343
Estimated Gas Usage: 1291 - 1716
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:78

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: joinFlexible(), txdata: 0x37bc8aa1, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: joinFlexible()
PC address: 8434
Estimated Gas Usage: 2167 - 2922
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:154

require(msg.sender == owner, "only owner can use this method")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: joinFlexible(), txdata: 0x37bc8aa1, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: activeBonusCacl_4()
PC address: 8726
Estimated Gas Usage: 1313 - 1738
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:78

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: activeBonusCacl_4(), txdata: 0x46f201b1, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: activeBonusCacl_4()
PC address: 8817
Estimated Gas Usage: 2189 - 2944
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:232

require(msg.sender == owner, "only owner can use this method")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: activeBonusCacl_4(), txdata: 0x46f201b1, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: bug_txorigin20(address)
PC address: 9076
Estimated Gas Usage: 587 - 682
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:186

require(tx.origin == owner_txorigin20)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: bug_txorigin20(address), txdata: 0x5119e0000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ethBank
Function name: teamAddBonus()
PC address: 9789
Estimated Gas Usage: 1445 - 1870
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_19.sol:78

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x403, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: teamAddBonus(), txdata: 0x5de88174, value: 0x0


