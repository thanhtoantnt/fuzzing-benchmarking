==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: bug_txorigin32(address)
PC address: 2978
Estimated Gas Usage: 241 - 336
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:268

require(tx.origin == owner_txorigin32)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: bug_txorigin32(address), txdata: 0x06b3ad660000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: transferTo_txorigin39(address,uint256,address)
PC address: 3062
Estimated Gas Usage: 345 - 440
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:429

require(tx.origin == owner_txorigin39)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferTo_txorigin39(address,uint256,address), txdata: 0x0a20e74e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: transferTo_txorigin7(address,uint256,address)
PC address: 3312
Estimated Gas Usage: 411 - 506
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:315

require(tx.origin == owner_txorigin7)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2bc14c0800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferTo_txorigin7(address,uint256,address), txdata: 0x3373f9d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: bug_txorigin20(address)
PC address: 3540
Estimated Gas Usage: 395 - 490
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:252

require(tx.origin == owner_txorigin20)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: bug_txorigin20(address), txdata: 0x5119e0000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: transferTo_txorigin3(address,uint256,address)
PC address: 3601
Estimated Gas Usage: 477 - 572
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:229

require(tx.origin == owner_txorigin3)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTo_txorigin3(address,uint256,address), txdata: 0x61f4e670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: transferTo_txorigin35(address,uint256,address)
PC address: 3736
Estimated Gas Usage: 521 - 616
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:468

require(tx.origin == owner_txorigin35)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000015, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferTo_txorigin35(address,uint256,address), txdata: 0x8376964d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: withdrawAll_txorigin26(address,address)
PC address: 3799
Estimated Gas Usage: 516 - 611
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:241

require(tx.origin == owner_txorigin26)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawAll_txorigin26(address,address), txdata: 0x8fecc3f900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: bug_txorigin36(address)
PC address: 4143
Estimated Gas Usage: 549 - 644
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:454

require(tx.origin == owner_txorigin36)

--------------------
Initial State:

Account: [CREATOR], balance: 0x24d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: bug_txorigin36(address), txdata: 0xb389b2c90000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: bug_txorigin4(address)
PC address: 4204
Estimated Gas Usage: 571 - 666
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:294

require(tx.origin == owner_txorigin4)

--------------------
Initial State:

Account: [CREATOR], balance: 0x244, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: bug_txorigin4(address), txdata: 0xb9e312580000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: withdrawAll_txorigin38(address,address)
PC address: 4265
Estimated Gas Usage: 626 - 721
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:278

require(tx.origin == owner_txorigin38)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3b9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawAll_txorigin38(address,address), txdata: 0xbff2792800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: SimpleSwapCoin
Function name: bug_txorigin32(address)
PC address: 4378
Estimated Gas Usage: 241 - 336
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:268

require(tx.origin == owner_txorigin32)

--------------------
Initial State:

Account: [CREATOR], balance: 0x240142181, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: bug_txorigin32(address), txdata: 0x06b3ad660000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: sendto_txorigin17(address,uint256,address)
PC address: 4556
Estimated Gas Usage: 697 - 792
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:217

require (tx.origin == owner_txorigin17)

--------------------
Initial State:

Account: [CREATOR], balance: 0x204804000015bd9c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: sendto_txorigin17(address,uint256,address), txdata: 0xebb646c2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: SimpleSwapCoin
Function name: transferTo_txorigin31(address,uint256,address)
PC address: 4601
Estimated Gas Usage: 345 - 440
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:546

require(tx.origin == owner_txorigin31)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferTo_txorigin31(address,uint256,address), txdata: 0x093533b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: SimpleSwapCoin
Function name: transferTo_txorigin39(address,uint256,address)
PC address: 4687
Estimated Gas Usage: 389 - 484
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:429

require(tx.origin == owner_txorigin39)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTo_txorigin39(address,uint256,address), txdata: 0x0a20e74e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: bug_txorigin8(address)
PC address: 4690
Estimated Gas Usage: 659 - 754
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:407

require(tx.origin == owner_txorigin8)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000003b9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: bug_txorigin8(address), txdata: 0xf54c741d0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: SimpleSwapCoin
Function name: transferTo_txorigin27(address,uint256,address)
PC address: 4750
Estimated Gas Usage: 411 - 506
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:526

require(tx.origin == owner_txorigin27)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferTo_txorigin27(address,uint256,address), txdata: 0x0ccb9a12000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: withdrawAll_txorigin30(address,address)
PC address: 4751
Estimated Gas Usage: 714 - 809
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:386

require(tx.origin == owner_txorigin30)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2820200200000082c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawAll_txorigin30(address,address), txdata: 0xf6f1137100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: withdrawAll_txorigin14(address,address)
PC address: 4907
Estimated Gas Usage: 736 - 831
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:359

require(tx.origin == owner_txorigin14)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000001bb2c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: withdrawAll_txorigin14(address,address), txdata: 0xf935226e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: SimpleSwapCoin
Function name: transferTo_txorigin7(address,uint256,address)
PC address: 5023
Estimated Gas Usage: 499 - 594
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:315

require(tx.origin == owner_txorigin7)

--------------------
Initial State:

Account: [CREATOR], balance: 0x48000000000000802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferTo_txorigin7(address,uint256,address), txdata: 0x3373f9d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: sendto_txorigin37(address,uint256,address)
PC address: 5063
Estimated Gas Usage: 785 - 880
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:223

require (tx.origin == owner_txorigin37)

--------------------
Initial State:

Account: [CREATOR], balance: 0xf08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: sendto_txorigin37(address,uint256,address), txdata: 0xfb44fdd1000000000000000000000000000008010000000002010004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000080100000000020100040000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: transferTo_txorigin23(address,uint256,address)
PC address: 5197
Estimated Gas Usage: 807 - 902
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:336

require(tx.origin == owner_txorigin23)

--------------------
Initial State:

Account: [CREATOR], balance: 0x728, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferTo_txorigin23(address,uint256,address), txdata: 0xfffdba83000000000000000000000000000100010000000000000002020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0001000100000000000000020200000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: SimpleSwapCoin
Function name: bug_txorigin20(address)
PC address: 5251
Estimated Gas Usage: 483 - 578
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:252

require(tx.origin == owner_txorigin20)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: bug_txorigin20(address), txdata: 0x5119e0000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000',), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: approve(address,uint256)
PC address: 5262
Estimated Gas Usage: 320 - 415
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:447

require(owner != address(0), "ERC20: approve from the zero address")

--------------------
Initial State:

Account: [CREATOR], balance: 0xac24c0902060000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: SimpleSwapCoin
Function name: sendto_txorigin13(address,uint256,address)
PC address: 5312
Estimated Gas Usage: 565 - 660
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:556

require (tx.origin == owner_txorigin13)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: sendto_txorigin13(address,uint256,address), txdata: 0x520aba35000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: SimpleSwapCoin
Function name: transferTo_txorigin19(address,uint256,address)
PC address: 5446
Estimated Gas Usage: 587 - 682
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:488

require(tx.origin == owner_txorigin19)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: transferTo_txorigin19(address,uint256,address), txdata: 0x5d7585b8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000000'), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 5465
Estimated Gas Usage: 15478 - 57250
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:448

require(spender != address(0), "ERC20: approve to the zero address")

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000401000415ed, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000002', '0x0000000000000000000000000000000000000001', 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 5903
Estimated Gas Usage: 584 - 679
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:378

require(sender != address(0), "ERC20: transfer from the zero address")

--------------------
Initial State:

Account: [CREATOR], balance: 0x12c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: SimpleSwapCoin
Function name: approve(address,uint256)
PC address: 7795
Estimated Gas Usage: 364 - 459
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: tx.origin/buggy_40.sol:447

require(owner != address(0), "ERC20: approve from the zero address")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0


