
GRX (CV/2018-11446.sol#33-433) has incorrect ERC20 function interface:GRX.transfer(address,uint256) (CV/2018-11446.sol#183-189)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface

owned.transferOwnership(address) (CV/2018-11446.sol#21-23) should emit an event for: 
	- owner = newOwner (CV/2018-11446.sol#22) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

GRX.setMinBalance(uint256) (CV/2018-11446.sol#119-121) should emit an event for: 
	- minBalanceForAccounts = minimumBalanceInWei (CV/2018-11446.sol#120) 
GRX.setPrices(uint256,uint256) (CV/2018-11446.sol#379-382) should emit an event for: 
	- sellPrice = newSellPrice (CV/2018-11446.sol#380) 
	- buyPrice = newBuyPrice (CV/2018-11446.sol#381) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

owned.transferOwnership(address).newOwner (CV/2018-11446.sol#21) lacks a zero-check on :
		- owner = newOwner (CV/2018-11446.sol#22)
GRX.withdraw(address,uint256).target (CV/2018-11446.sol#420) lacks a zero-check on :
		- target.transfer(amount) (CV/2018-11446.sol#421)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

owned.onlyAdmin() (CV/2018-11446.sol#16-19) compares to a boolean constant:
	-require(bool)(admins[msg.sender] == true) (CV/2018-11446.sol#17)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

Pragma version^0.4.13 (CV/2018-11446.sol#1) allows old versions
solc-0.4.13 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Contract owned (CV/2018-11446.sol#2-27) is not in CapWords
Contract tokenRecipient (CV/2018-11446.sol#29-31) is not in CapWords
Parameter GRX.transfer(address,uint256)._to (CV/2018-11446.sol#183) is not in mixedCase
Parameter GRX.transfer(address,uint256)._value (CV/2018-11446.sol#183) is not in mixedCase
Parameter GRX.reward(address,uint256,bool,string)._to (CV/2018-11446.sol#210) is not in mixedCase
Parameter GRX.reward(address,uint256,bool,string)._value (CV/2018-11446.sol#210) is not in mixedCase
Parameter GRX.transferReward(address,uint256)._to (CV/2018-11446.sol#245) is not in mixedCase
Parameter GRX.transferReward(address,uint256)._value (CV/2018-11446.sol#245) is not in mixedCase
Parameter GRX.unlockReward(address,uint256)._value (CV/2018-11446.sol#267) is not in mixedCase
Parameter GRX.transferFrom(address,address,uint256)._from (CV/2018-11446.sol#291) is not in mixedCase
Parameter GRX.transferFrom(address,address,uint256)._to (CV/2018-11446.sol#291) is not in mixedCase
Parameter GRX.transferFrom(address,address,uint256)._value (CV/2018-11446.sol#291) is not in mixedCase
Parameter GRX.approve(address,uint256)._spender (CV/2018-11446.sol#307) is not in mixedCase
Parameter GRX.approve(address,uint256)._value (CV/2018-11446.sol#307) is not in mixedCase
Parameter GRX.approveAndCall(address,uint256,bytes)._spender (CV/2018-11446.sol#322) is not in mixedCase
Parameter GRX.approveAndCall(address,uint256,bytes)._value (CV/2018-11446.sol#322) is not in mixedCase
Parameter GRX.approveAndCall(address,uint256,bytes)._extraData (CV/2018-11446.sol#322) is not in mixedCase
Parameter GRX.burn(uint256)._value (CV/2018-11446.sol#338) is not in mixedCase
Parameter GRX.burnFrom(address,uint256)._from (CV/2018-11446.sol#354) is not in mixedCase
Parameter GRX.burnFrom(address,uint256)._value (CV/2018-11446.sol#354) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in GRX.reward(address,uint256,bool,string) (CV/2018-11446.sol#210-235):
	External calls:
	- sell((minBalanceForAccounts - msg.sender.balance) * sellPrice) (CV/2018-11446.sol#214)
		- require(bool)(msg.sender.send(revenue)) (CV/2018-11446.sol#412)
	State variables written after the call(s):
	- _transfer(msg.sender,_to,_value) (CV/2018-11446.sol#217)
		- balanceOf[_from] -= _value (CV/2018-11446.sol#170)
		- balanceOf[_to] += _value (CV/2018-11446.sol#171)
	- balanceOf[msg.sender] -= _value (CV/2018-11446.sol#222)
	- lockedRewardsOf[_to][msg.sender] += _value (CV/2018-11446.sol#224)
	- totalLockedRewardsOf[_to] += _value (CV/2018-11446.sol#223)
	- totalRewardIssuedOut[msg.sender] += _value (CV/2018-11446.sol#230)
	- userRewardCount[_to][msg.sender] += 1 (CV/2018-11446.sol#229)
	- userRewarderCount[_to] += 1 (CV/2018-11446.sol#226)
	- userRewarders[_to][userRewarderCount[_to]] = msg.sender (CV/2018-11446.sol#227)
	Event emitted after the call(s):
	- Reward(msg.sender,_to,_value,data,now) (CV/2018-11446.sol#234)
	- Transfer(_from,_to,_value) (CV/2018-11446.sol#172)
		- _transfer(msg.sender,_to,_value) (CV/2018-11446.sol#217)
	- Transfer(msg.sender,_to,_value) (CV/2018-11446.sol#231)
Reentrancy in GRX.sell(uint256) (CV/2018-11446.sol#403-415):
	External calls:
	- require(bool)(msg.sender.send(revenue)) (CV/2018-11446.sol#412)
	Event emitted after the call(s):
	- Transfer(msg.sender,this,amount) (CV/2018-11446.sol#413)
Reentrancy in GRX.transfer(address,uint256) (CV/2018-11446.sol#183-189):
	External calls:
	- sell((minBalanceForAccounts - msg.sender.balance) * sellPrice) (CV/2018-11446.sol#186)
		- require(bool)(msg.sender.send(revenue)) (CV/2018-11446.sol#412)
	State variables written after the call(s):
	- _transfer(msg.sender,_to,_value) (CV/2018-11446.sol#188)
		- balanceOf[_from] -= _value (CV/2018-11446.sol#170)
		- balanceOf[_to] += _value (CV/2018-11446.sol#171)
	Event emitted after the call(s):
	- Transfer(_from,_to,_value) (CV/2018-11446.sol#172)
		- _transfer(msg.sender,_to,_value) (CV/2018-11446.sol#188)
Reentrancy in GRX.transferReward(address,uint256) (CV/2018-11446.sol#245-257):
	External calls:
	- sell((minBalanceForAccounts - msg.sender.balance) * sellPrice) (CV/2018-11446.sol#251)
		- require(bool)(msg.sender.send(revenue)) (CV/2018-11446.sol#412)
	State variables written after the call(s):
	- balanceOf[_to] += _value (CV/2018-11446.sol#255)
	- lockedRewardsOf[msg.sender][_to] -= _value (CV/2018-11446.sol#254)
	- totalLockedRewardsOf[msg.sender] -= _value (CV/2018-11446.sol#253)
	Event emitted after the call(s):
	- Transfer(msg.sender,_to,_value) (CV/2018-11446.sol#256)
Reentrancy in GRX.unlockReward(address,uint256) (CV/2018-11446.sol#267-278):
	External calls:
	- sell((minBalanceForAccounts - msg.sender.balance) * sellPrice) (CV/2018-11446.sol#272)
		- require(bool)(msg.sender.send(revenue)) (CV/2018-11446.sol#412)
	State variables written after the call(s):
	- balanceOf[addr] += _value (CV/2018-11446.sol#276)
	- lockedRewardsOf[addr][msg.sender] -= _value (CV/2018-11446.sol#275)
	- totalLockedRewardsOf[addr] -= _value (CV/2018-11446.sol#274)
	Event emitted after the call(s):
	- Unlock(addr,msg.sender,_value) (CV/2018-11446.sol#277)
Reentrancy in GRX.withdraw(address,uint256) (CV/2018-11446.sol#420-423):
	External calls:
	- target.transfer(amount) (CV/2018-11446.sol#421)
	Event emitted after the call(s):
	- Withdrawn(target,amount) (CV/2018-11446.sol#422)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

GRX.GRX() (CV/2018-11446.sol#88-101) uses literals with too many digits:
	- initialSupply = 20000000000000000000000000 (CV/2018-11446.sol#89)
GRX.GRX() (CV/2018-11446.sol#88-101) uses literals with too many digits:
	- minBalanceForAccounts = 1000000000000000 (CV/2018-11446.sol#95)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

receiveApproval(address,uint256,address,bytes) should be declared external:
	- tokenRecipient.receiveApproval(address,uint256,address,bytes) (CV/2018-11446.sol#30)
reward(address,uint256,bool,string) should be declared external:
	- GRX.reward(address,uint256,bool,string) (CV/2018-11446.sol#210-235)
approveAndCall(address,uint256,bytes) should be declared external:
	- GRX.approveAndCall(address,uint256,bytes) (CV/2018-11446.sol#322-329)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
CV/2018-11446.sol analyzed (3 contracts with 80 detectors), 40 result(s) found
