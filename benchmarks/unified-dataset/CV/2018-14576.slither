Compilation warnings/errors on CV/2018-14576.sol:
CV/2018-14576.sol:11:3: Warning: No visibility specified. Defaulting to "public".
  function owned() {
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:16:30: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (msg.sender != owner) throw;
                             ^---^
CV/2018-14576.sol:20:3: Warning: No visibility specified. Defaulting to "public".
  function transferOwnership(address newOwner) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:26:3: Warning: No visibility specified. Defaulting to "public".
  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);
  ^----------------------------------------------------------------------------------------^
CV/2018-14576.sol:32:3: Warning: No visibility specified. Defaulting to "public".
  function totalSupply() constant returns (uint256 totalSupply);
  ^------------------------------------------------------------^
CV/2018-14576.sol:36:3: Warning: No visibility specified. Defaulting to "public".
  function balanceOf(address _owner) constant returns (uint256 balance) {}
  ^----------------------------------------------------------------------^
CV/2018-14576.sol:42:3: Warning: No visibility specified. Defaulting to "public".
  function transfer(address _to, uint256 _value) returns (bool success) {}
  ^----------------------------------------------------------------------^
CV/2018-14576.sol:49:3: Warning: No visibility specified. Defaulting to "public".
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}
  ^-----------------------------------------------------------------------------------------^
CV/2018-14576.sol:55:3: Warning: No visibility specified. Defaulting to "public".
  function approve(address _spender, uint256 _value) returns (bool success) {}
  ^--------------------------------------------------------------------------^
CV/2018-14576.sol:60:3: Warning: No visibility specified. Defaulting to "public".
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}
  ^------------------------------------------------------------------------------------------^
CV/2018-14576.sol:88:3: Warning: No visibility specified. Defaulting to "public".
  function SunContractToken(address _icoAddress) {
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:96:3: Warning: No visibility specified. Defaulting to "public".
  function totalSupply() constant returns (uint256 totalSupply) {
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:101:3: Warning: No visibility specified. Defaulting to "public".
  function balanceOf(address _owner) constant returns (uint256 balance) {
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:106:3: Warning: No visibility specified. Defaulting to "public".
  function transfer(address _to, uint256 _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:107:47: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen
                                              ^---^
CV/2018-14576.sol:108:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (restrictedAddresses[_to]) throw;                // Throw if recipient is restricted address
                                  ^---^
CV/2018-14576.sol:109:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (balances[msg.sender] < _value) throw;           // Throw if sender has insufficient balance
                                       ^---^
CV/2018-14576.sol:110:49: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (balances[_to] + _value < balances[_to]) throw;  // Throw if owerflow detected
                                                ^---^
CV/2018-14576.sol:118:3: Warning: No visibility specified. Defaulting to "public".
  function approve(address _spender, uint256 _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:119:47: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen        
                                              ^---^
CV/2018-14576.sol:126:3: Warning: No visibility specified. Defaulting to "public".
  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {            
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:134:3: Warning: No visibility specified. Defaulting to "public".
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {      
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:135:47: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen
                                              ^---^
CV/2018-14576.sol:136:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (restrictedAddresses[_to]) throw;                // Throw if recipient is restricted address  
                                  ^---^
CV/2018-14576.sol:137:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (balances[_from] < _value) throw;                // Throw if sender does not have enough balance     
                                  ^---^
CV/2018-14576.sol:138:49: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (balances[_to] + _value < balances[_to]) throw;  // Throw if overflow detected    
                                                ^---^
CV/2018-14576.sol:139:49: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (_value > allowances[_from][msg.sender]) throw;  // Throw if you do not have allowance       
                                                ^---^
CV/2018-14576.sol:148:3: Warning: No visibility specified. Defaulting to "public".
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {         
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:153:3: Warning: No visibility specified. Defaulting to "public".
  function mintTokens(address _to, uint256 _amount) {         
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:154:43: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (msg.sender != icoContractAddress) throw;            // Only ICO address can mint tokens        
                                          ^---^
CV/2018-14576.sol:155:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (restrictedAddresses[_to]) throw;                    // Throw if user wants to send to restricted address       
                                  ^---^
CV/2018-14576.sol:156:50: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (balances[_to] + _amount < balances[_to]) throw;     // Check for overflows
                                                 ^---^
CV/2018-14576.sol:164:3: Warning: No visibility specified. Defaulting to "public".
  function burnTokens(uint256 _amount) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:165:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if(balances[msg.sender] < _amount) throw;               // Throw if you do not have enough balance
                                       ^---^
CV/2018-14576.sol:166:26: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if(supply < _amount) throw;                             // Throw if overflow detected
                         ^---^
CV/2018-14576.sol:175:3: Warning: No visibility specified. Defaulting to "public".
  function freezeTransfersUntil(uint256 _frozenUntilBlock, string _reason) onlyOwner {      
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:180:3: Warning: No visibility specified. Defaulting to "public".
  function isRestrictedAddress(address _querryAddress) constant returns (bool answer){
  ^ (Relevant source part starts here and spans across multiple lines).
CV/2018-14576.sol:32:44: Warning: This declaration shadows an existing declaration.
  function totalSupply() constant returns (uint256 totalSupply);
                                           ^-----------------^
CV/2018-14576.sol:32:3: The shadowed declaration is here:
  function totalSupply() constant returns (uint256 totalSupply);
  ^------------------------------------------------------------^

CV/2018-14576.sol:96:44: Warning: This declaration shadows an existing declaration.
  function totalSupply() constant returns (uint256 totalSupply) {
                                           ^-----------------^
CV/2018-14576.sol:96:3: The shadowed declaration is here:
  function totalSupply() constant returns (uint256 totalSupply) {
  ^ (Relevant source part starts here and spans across multiple lines).

CV/2018-14576.sol:113:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(msg.sender, _to, _value);                  // Raise Transfer event
    ^-------------------------------^
CV/2018-14576.sol:121:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, _value);             // Raise Approval event         
    ^------------------------------------^
CV/2018-14576.sol:143:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(_from, _to, _value);                       // Raise Transfer event
    ^--------------------------^
CV/2018-14576.sol:159:5: Warning: Invoking events without "emit" prefix is deprecated.
    Mint(_to, _amount);                                     // Create Mint event       
    ^----------------^
CV/2018-14576.sol:160:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x
    ^-------------------------^
CV/2018-14576.sol:170:5: Warning: Invoking events without "emit" prefix is deprecated.
    Burn(msg.sender, _amount);                              // Raise Burn event
    ^-----------------------^
CV/2018-14576.sol:171:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(msg.sender, 0x0, _amount);                     // Raise transfer to 0x0
    ^--------------------------------^
CV/2018-14576.sol:177:5: Warning: Invoking events without "emit" prefix is deprecated.
    TokenFrozen(_frozenUntilBlock, _reason);
    ^-------------------------------------^
CV/2018-14576.sol:36:22: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function balanceOf(address _owner) constant returns (uint256 balance) {}
                     ^------------^
CV/2018-14576.sol:36:56: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function balanceOf(address _owner) constant returns (uint256 balance) {}
                                                       ^-------------^
CV/2018-14576.sol:42:21: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transfer(address _to, uint256 _value) returns (bool success) {}
                    ^---------^
CV/2018-14576.sol:42:34: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transfer(address _to, uint256 _value) returns (bool success) {}
                                 ^------------^
CV/2018-14576.sol:42:59: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transfer(address _to, uint256 _value) returns (bool success) {}
                                                          ^----------^
CV/2018-14576.sol:49:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}
                        ^-----------^
CV/2018-14576.sol:49:40: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}
                                       ^---------^
CV/2018-14576.sol:49:53: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}
                                                    ^------------^
CV/2018-14576.sol:49:78: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}
                                                                             ^----------^
CV/2018-14576.sol:55:20: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function approve(address _spender, uint256 _value) returns (bool success) {}
                   ^--------------^
CV/2018-14576.sol:55:38: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function approve(address _spender, uint256 _value) returns (bool success) {}
                                     ^------------^
CV/2018-14576.sol:55:63: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function approve(address _spender, uint256 _value) returns (bool success) {}
                                                              ^----------^
CV/2018-14576.sol:60:22: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}
                     ^------------^
CV/2018-14576.sol:60:38: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}
                                     ^--------------^
CV/2018-14576.sol:60:74: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}
                                                                         ^---------------^
CV/2018-14576.sol:36:3: Warning: Function state mutability can be restricted to pure
  function balanceOf(address _owner) constant returns (uint256 balance) {}
  ^----------------------------------------------------------------------^
CV/2018-14576.sol:42:3: Warning: Function state mutability can be restricted to pure
  function transfer(address _to, uint256 _value) returns (bool success) {}
  ^----------------------------------------------------------------------^
CV/2018-14576.sol:49:3: Warning: Function state mutability can be restricted to pure
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}
  ^-----------------------------------------------------------------------------------------^
CV/2018-14576.sol:55:3: Warning: Function state mutability can be restricted to pure
  function approve(address _spender, uint256 _value) returns (bool success) {}
  ^--------------------------------------------------------------------------^
CV/2018-14576.sol:60:3: Warning: Function state mutability can be restricted to pure
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}
  ^------------------------------------------------------------------------------------------^


IERC20Token.totalSupply().totalSupply (CV/2018-14576.sol#32) shadows:
	- IERC20Token.totalSupply() (CV/2018-14576.sol#32) (function)
SunContractToken.totalSupply().totalSupply (CV/2018-14576.sol#96) shadows:
	- SunContractToken.totalSupply() (CV/2018-14576.sol#96-98) (function)
	- IERC20Token.totalSupply() (CV/2018-14576.sol#32) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

owned.transferOwnership(address) (CV/2018-14576.sol#20-22) should emit an event for: 
	- owner = newOwner (CV/2018-14576.sol#21) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

owned.transferOwnership(address).newOwner (CV/2018-14576.sol#20) lacks a zero-check on :
		- owner = newOwner (CV/2018-14576.sol#21)
SunContractToken.SunContractToken(address)._icoAddress (CV/2018-14576.sol#88) lacks a zero-check on :
		- icoContractAddress = _icoAddress (CV/2018-14576.sol#92)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Deprecated standard detected THROW (CV/2018-14576.sol#16):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#107):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#108):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#109):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#110):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#119):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#135):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#136):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#137):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#138):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#139):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#154):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#155):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#156):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#165):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (CV/2018-14576.sol#166):
	- Usage of "throw" should be replaced with "revert()"
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#deprecated-standards

Pragma version^0.4.21 (CV/2018-14576.sol#1) allows old versions
solc-0.4.21 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Contract owned (CV/2018-14576.sol#7-23) is not in CapWords
Contract tokenRecipient (CV/2018-14576.sol#25-27) is not in CapWords
Parameter SunContractToken.balanceOf(address)._owner (CV/2018-14576.sol#101) is not in mixedCase
Parameter SunContractToken.transfer(address,uint256)._to (CV/2018-14576.sol#106) is not in mixedCase
Parameter SunContractToken.transfer(address,uint256)._value (CV/2018-14576.sol#106) is not in mixedCase
Parameter SunContractToken.approve(address,uint256)._spender (CV/2018-14576.sol#118) is not in mixedCase
Parameter SunContractToken.approve(address,uint256)._value (CV/2018-14576.sol#118) is not in mixedCase
Parameter SunContractToken.approveAndCall(address,uint256,bytes)._spender (CV/2018-14576.sol#126) is not in mixedCase
Parameter SunContractToken.approveAndCall(address,uint256,bytes)._value (CV/2018-14576.sol#126) is not in mixedCase
Parameter SunContractToken.approveAndCall(address,uint256,bytes)._extraData (CV/2018-14576.sol#126) is not in mixedCase
Parameter SunContractToken.transferFrom(address,address,uint256)._from (CV/2018-14576.sol#134) is not in mixedCase
Parameter SunContractToken.transferFrom(address,address,uint256)._to (CV/2018-14576.sol#134) is not in mixedCase
Parameter SunContractToken.transferFrom(address,address,uint256)._value (CV/2018-14576.sol#134) is not in mixedCase
Parameter SunContractToken.allowance(address,address)._owner (CV/2018-14576.sol#148) is not in mixedCase
Parameter SunContractToken.allowance(address,address)._spender (CV/2018-14576.sol#148) is not in mixedCase
Parameter SunContractToken.mintTokens(address,uint256)._to (CV/2018-14576.sol#153) is not in mixedCase
Parameter SunContractToken.mintTokens(address,uint256)._amount (CV/2018-14576.sol#153) is not in mixedCase
Parameter SunContractToken.burnTokens(uint256)._amount (CV/2018-14576.sol#164) is not in mixedCase
Parameter SunContractToken.freezeTransfersUntil(uint256,string)._frozenUntilBlock (CV/2018-14576.sol#175) is not in mixedCase
Parameter SunContractToken.freezeTransfersUntil(uint256,string)._reason (CV/2018-14576.sol#175) is not in mixedCase
Parameter SunContractToken.isRestrictedAddress(address)._querryAddress (CV/2018-14576.sol#180) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

SunContractToken.decimals (CV/2018-14576.sol#72) should be constant
SunContractToken.name (CV/2018-14576.sol#70) should be constant
SunContractToken.standard (CV/2018-14576.sol#69) should be constant
SunContractToken.symbol (CV/2018-14576.sol#71) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

receiveApproval(address,uint256,address,bytes) should be declared external:
	- tokenRecipient.receiveApproval(address,uint256,address,bytes) (CV/2018-14576.sol#26)
approveAndCall(address,uint256,bytes) should be declared external:
	- SunContractToken.approveAndCall(address,uint256,bytes) (CV/2018-14576.sol#126-131)
freezeTransfersUntil(uint256,string) should be declared external:
	- SunContractToken.freezeTransfersUntil(uint256,string) (CV/2018-14576.sol#175-178)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
CV/2018-14576.sol analyzed (4 contracts with 80 detectors), 51 result(s) found
