
GuessTheRandomNumberChallenge.guess(uint8) (CV/guess_the_random_number.sol#22-28) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.transfer(2000000000000000000) (CV/guess_the_random_number.sol#26)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

GuessTheRandomNumberChallenge.guess(uint8) (CV/guess_the_random_number.sol#22-28) uses a dangerous strict equality:
	- n == answer (CV/guess_the_random_number.sol#25)
GuessTheRandomNumberChallenge.isComplete() (CV/guess_the_random_number.sol#18-20) uses a dangerous strict equality:
	- address(this).balance == 0 (CV/guess_the_random_number.sol#19)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

GuessTheRandomNumberChallenge.guess(uint8) (CV/guess_the_random_number.sol#22-28) uses timestamp for comparisons
	Dangerous comparisons:
	- n == answer (CV/guess_the_random_number.sol#25)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Deprecated standard detected answer = uint8(keccak256()(block.blockhash(block.number - 1),now)) (CV/guess_the_random_number.sol#15):
	- Usage of "block.blockhash()" should be replaced with "blockhash()"
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#deprecated-standards

Pragma version^0.4.21 (CV/guess_the_random_number.sol#8) allows old versions
solc-0.4.21 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
CV/guess_the_random_number.sol analyzed (1 contracts with 80 detectors), 7 result(s) found
